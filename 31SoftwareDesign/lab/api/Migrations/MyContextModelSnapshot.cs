// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Models;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_name");

                    b.Property<decimal>("Salary")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("salary");

                    b.HasKey("Id")
                        .HasName("driver_pk");

                    b.ToTable("driver", (string)null);
                });

            modelBuilder.Entity("api.Models.DriverRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("driver_route_pk");

                    b.HasIndex("DriverId");

                    b.HasIndex("RouteId");

                    b.HasIndex("VehicleId");

                    b.ToTable("driver_route", (string)null);
                });

            modelBuilder.Entity("api.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("feedback_pk");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("api.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FirstStopId")
                        .HasColumnType("integer")
                        .HasColumnName("first_stop_id");

                    b.Property<int>("LastStopId")
                        .HasColumnType("integer")
                        .HasColumnName("last_stop_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("route_pk");

                    b.HasIndex("FirstStopId");

                    b.HasIndex("LastStopId");

                    b.ToTable("route", (string)null);
                });

            modelBuilder.Entity("api.Models.RouteStop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrdIndex")
                        .HasColumnType("integer")
                        .HasColumnName("ord_index");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.Property<int>("StopId")
                        .HasColumnType("integer")
                        .HasColumnName("stop_id");

                    b.HasKey("Id")
                        .HasName("table_name_pk");

                    b.HasIndex("StopId");

                    b.HasIndex(new[] { "RouteId", "OrdIndex" }, "route_stop_route_id_ord_index_key")
                        .IsUnique();

                    b.HasIndex(new[] { "RouteId", "StopId" }, "route_stop_route_id_stop_id_key")
                        .IsUnique();

                    b.ToTable("route_stop", (string)null);
                });

            modelBuilder.Entity("api.Models.RouteVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("LastCoordsTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_coords_time");

                    b.Property<decimal?>("LastLat")
                        .HasPrecision(8, 6)
                        .HasColumnType("numeric(8,6)")
                        .HasColumnName("last_lat");

                    b.Property<decimal?>("LastLon")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)")
                        .HasColumnName("last_lon");

                    b.Property<int?>("NextStop")
                        .HasColumnType("integer")
                        .HasColumnName("next_stop");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("route_vehicle_pk");

                    b.HasIndex("NextStop");

                    b.HasIndex("RouteId");

                    b.HasIndex("VehicleId");

                    b.ToTable("route_vehicle", (string)null);
                });

            modelBuilder.Entity("api.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("arrival_time");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("departure_time");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.Property<int>("StopId")
                        .HasColumnType("integer")
                        .HasColumnName("stop_id");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("timetable_pk");

                    b.HasIndex("RouteId");

                    b.HasIndex("StopId");

                    b.HasIndex("VehicleId");

                    b.ToTable("schedule", (string)null);
                });

            modelBuilder.Entity("api.Models.Stop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Lat")
                        .HasPrecision(8, 6)
                        .HasColumnType("numeric(8,6)")
                        .HasColumnName("lat");

                    b.Property<decimal>("Lon")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)")
                        .HasColumnName("lon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("stop_pk");

                    b.ToTable("stop", (string)null);
                });

            modelBuilder.Entity("api.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Fare")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("fare");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("transaction_id");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("ticket_pk");

                    b.HasIndex("RouteId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ticket", (string)null);
                });

            modelBuilder.Entity("api.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("license_plate");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("vehicle_pk");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("api.Models.VehicleMaintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostTotal")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("cost_total");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("vehicle_maintenance_pk");

                    b.HasIndex("VehicleId");

                    b.ToTable("vehicle_maintenance", (string)null);
                });

            modelBuilder.Entity("api.Models.DriverRoute", b =>
                {
                    b.HasOne("api.Models.Driver", "Driver")
                        .WithMany("DriverRoutes")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("driver_route_driver_id_fk");

                    b.HasOne("api.Models.Route", "Route")
                        .WithMany("DriverRoutes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("driver_route_route_id_fk");

                    b.HasOne("api.Models.Vehicle", "Vehicle")
                        .WithMany("DriverRoutes")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("driver_route_vehicle_id_fk");

                    b.Navigation("Driver");

                    b.Navigation("Route");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("api.Models.Route", b =>
                {
                    b.HasOne("api.Models.Stop", "FirstStop")
                        .WithMany("RouteFirstStops")
                        .HasForeignKey("FirstStopId")
                        .IsRequired()
                        .HasConstraintName("route_stop_id_fk");

                    b.HasOne("api.Models.Stop", "LastStop")
                        .WithMany("RouteLastStops")
                        .HasForeignKey("LastStopId")
                        .IsRequired()
                        .HasConstraintName("route_stop_id_fk2");

                    b.Navigation("FirstStop");

                    b.Navigation("LastStop");
                });

            modelBuilder.Entity("api.Models.RouteStop", b =>
                {
                    b.HasOne("api.Models.Route", "Route")
                        .WithMany("RouteStops")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("table_name_route_id_fk");

                    b.HasOne("api.Models.Stop", "Stop")
                        .WithMany("RouteStops")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("table_name_stop_id_fk");

                    b.Navigation("Route");

                    b.Navigation("Stop");
                });

            modelBuilder.Entity("api.Models.RouteVehicle", b =>
                {
                    b.HasOne("api.Models.Stop", "NextStopNavigation")
                        .WithMany("RouteVehicles")
                        .HasForeignKey("NextStop")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("route_vehicle_stop_id_fk");

                    b.HasOne("api.Models.Route", "Route")
                        .WithMany("RouteVehicles")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("route_vehicle_route_id_fk");

                    b.HasOne("api.Models.Vehicle", "Vehicle")
                        .WithMany("RouteVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("route_vehicle_vahicle_id_fk");

                    b.Navigation("NextStopNavigation");

                    b.Navigation("Route");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("api.Models.Schedule", b =>
                {
                    b.HasOne("api.Models.Route", "Route")
                        .WithMany("Schedules")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("timetable_route_id_fk");

                    b.HasOne("api.Models.Stop", "Stop")
                        .WithMany("Schedules")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("timetable_stop_id_fk");

                    b.HasOne("api.Models.Vehicle", "Vehicle")
                        .WithMany("Schedules")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("timetable_vehicle_id_fk");

                    b.Navigation("Route");

                    b.Navigation("Stop");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("api.Models.Ticket", b =>
                {
                    b.HasOne("api.Models.Route", "Route")
                        .WithMany("Tickets")
                        .HasForeignKey("RouteId")
                        .IsRequired()
                        .HasConstraintName("ticket_route_id_fk");

                    b.HasOne("api.Models.Vehicle", "Vehicle")
                        .WithMany("Tickets")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("ticket_vehicle_id_fk");

                    b.Navigation("Route");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("api.Models.VehicleMaintenance", b =>
                {
                    b.HasOne("api.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleMaintenances")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("vehicle_maintenance_vehicle_id_fk");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("api.Models.Driver", b =>
                {
                    b.Navigation("DriverRoutes");
                });

            modelBuilder.Entity("api.Models.Route", b =>
                {
                    b.Navigation("DriverRoutes");

                    b.Navigation("RouteStops");

                    b.Navigation("RouteVehicles");

                    b.Navigation("Schedules");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api.Models.Stop", b =>
                {
                    b.Navigation("RouteFirstStops");

                    b.Navigation("RouteLastStops");

                    b.Navigation("RouteStops");

                    b.Navigation("RouteVehicles");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("api.Models.Vehicle", b =>
                {
                    b.Navigation("DriverRoutes");

                    b.Navigation("RouteVehicles");

                    b.Navigation("Schedules");

                    b.Navigation("Tickets");

                    b.Navigation("VehicleMaintenances");
                });
#pragma warning restore 612, 618
        }
    }
}
